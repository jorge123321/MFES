class TestBuilding is subclass of MyTestCase
operations
		protected assertFalse : bool ==> ()
			assertFalse(a) == return
				pre a = false;
					
		-- tests the creation of a building, and if it has an origin and a destination at the beginning which should be false since it doesn't have it!
		public TestCreateBuilding : () ==> ()
	 		TestCreateBuilding() == ( 
	       	dcl b : Building := new Building(5,5,2);
	       	assertFalse(b.hasOrigin(b.points));
	       	assertFalse(b.hasDestination(b.points));
	  );
	  
	  -- tests adding an origin to the building and checking if the building has an origin after
	  public TestAddOrigin : () ==> ()
			TestAddOrigin() == (
					dcl b : Building := new Building(5,5,2);
					dcl result : bool;
		     	assertFalse(b.hasOrigin(b.points));
	       	result := b.addOrigin(1,0,0);
	       	assertTrue(b.hasOrigin(b.points));
			);	  
			
		-- tests adding a destination to the building and checking if the building has a destination after
		public TestAddDestination : () ==> ()
			TestAddDestination() == (
					dcl b : Building := new Building(5,5,2);
					dcl result : bool;
		     	assertFalse(b.hasDestination(b.points));
	       	result := b.addDestination(1,0,0);
	       	assertTrue(b.hasDestination(b.points));
			);	 
			
		-- tests changing a point type from NULL to Coffee and checking if it was changed
		public TestAddType : () ==> ()
			TestAddType() == (
					dcl b : Building := new Building(5,5,2);
					dcl result : bool;
		     	for all p1 in set b.points do (
		     		if(p1.GetX() = 1 and p1.GetY() = 1 and p1.GetZ() = 1) then (
		     			assertEqual(p1.GetDesc(), <Null>);
			       	result := b.addType(p1.GetX(),p1.GetY(),p1.GetZ(),<Coffee>);
			       	assertEqual(p1.GetDesc(), <Coffee>);
		     		);
		     	);
			);	 
		
		-- tests finding a path between an origin (1,0,0) and a destination (3,0,0) with a wall between
		-- and test changeOrigin and changeDestination
		public TestMakePath : () ==> ()
			TestMakePath() == (
				dcl b: Building := new Building(5,5,2);
				dcl result : bool;
				dcl path : seq of PointOfInterest;
				dcl result2 : (Building`Points * map PointOfInterest to int * map PointOfInterest to PointOfInterest);
	      result := b.addOrigin(1,0,0);
	      result := b.addDestination(3,0,0);
	      result := b.addType(2,0,0,<Wall>);
	      result2 := b.startDijkstra();
	      path := b.makePath();
	      assertEqual(len(path),5);
	      result:= b.changeOrigin(4,4,0);
	      result:= b.changeDestination(3,3,0);
	      result2:= b.startDijkstra();
	      path:= b.makePath();
	      assertEqual(len(path),3);
			);
		
		-- tests if it can find a coffee nearby an origin after adding a coffee spot
		public TestFindCoffeeNearby : () ==> ()
			TestFindCoffeeNearby() == (
				dcl b: Building := new Building(5,5,2);
				dcl result : bool;
				dcl path : seq of PointOfInterest;
				dcl result2 : (Building`Points * map PointOfInterest to int * map PointOfInterest to PointOfInterest);
	      result := b.addOrigin(1,0,0);
	      result := b.addDestination(3,0,0);
	      result2 := b.startDijkstra();
	      
	      for all p1 in set b.points do (
	     		if(p1.GetX() = 2 and p1.GetY() = 2 and p1.GetZ() = 0) then (
	     			assertEqual(p1.GetDesc(), <Null>);
		       	result := b.addType(p1.GetX(),p1.GetY(),p1.GetZ(),<Coffee>);
		       	assertEqual(p1.GetDesc(), <Coffee>);
	     		);
	     	);
	     	
	     	path := b.getPathToClosestType(<Coffee>);
	      assertEqual(len(path),4);
	      
			);
			
		public FailingTestMakePath : () ==> ()
			FailingTestMakePath() == (
				dcl b: Building := new Building(5,5,2);
				dcl result : bool;
				dcl path : seq of PointOfInterest;
				dcl result2 : (Building`Points * map PointOfInterest to int * map PointOfInterest to PointOfInterest);
	      result2 := b.startDijkstra(); -- breaks pre-condition
	      path := b.makePath();
			);
			
		public FailingTestFindCoffeeNearby : () ==> ()
			FailingTestFindCoffeeNearby() == (
				dcl b: Building := new Building(5,5,2);
				dcl result : bool;
				dcl path : seq of PointOfInterest;
				dcl result2 : (Building`Points * map PointOfInterest to int * map PointOfInterest to PointOfInterest);
	      result := b.addOrigin(1,0,0);
	      result := b.addDestination(3,0,0);
	      result2 := b.startDijkstra();
	     	
	     	path := b.getPathToClosestType(<Coffee>); -- breaks pre-condition
	      assertEqual(len(path),4);
			);
			
	  public static main: () ==> ()
	  		main() ==
	  		(
	  			new TestBuilding().TestCreateBuilding();
	  			new TestBuilding().TestAddOrigin();
	  			new TestBuilding().TestAddDestination();
	  			new TestBuilding().TestAddType();
	  			new TestBuilding().TestMakePath();
	  			new TestBuilding().TestFindCoffeeNearby();
	  		);
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end TestBuilding