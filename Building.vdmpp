class Building
types
	 public Points = set of PointOfInterest;
	 public Transports = set of Transport;
	 public Equipments = set of Equipment;

instance variables
	public points : Points := {};
	public transports : Transports := {};
	public equipments : Equipments := {};
	public path : set of PointOfInterest := {};

functions
	-- checks if we're only moving 1 position at a time, ie one move on the x left or right, one move on y up or down and one move on z up or down
	public moveIsValid : nat * nat * nat -> bool
			moveIsValid(deltaX, deltaY, deltaZ) == (
				(deltaX = 0 and deltaY = 0 and deltaZ = 1) or
				(deltaX = 0 and deltaY = 0 and deltaZ = -1) or
				(deltaX = 1 and deltaY = 0 and deltaZ = 0) or
				(deltaX = -1 and deltaY = 0 and deltaZ = 0) or
				(deltaX = 0 and deltaY = 1 and deltaZ = 0) or
				(deltaX = 0 and deltaY = -1 and deltaZ = 0)
			);

operations

	--create a building
	public Building:() ==> Building
	Building() == (		
		for i = 0 to 9 do
		(
			for j = 0 to 9 do
			(
					for k = 0 to 2 do 
					(
						dcl point: PointOfInterest := new PointOfInterest(i,j,k,"path");
						addPoint(point);
					)
			)
		);
		return self;
		);
		
	-- Add a point to the building
	public addPoint: PointOfInterest ==> ()
		addPoint(P) == (
				points := points union {P};
			return;
		)
		pre P not in set points
		post P in set points;
		
	-- Add a stair to the building
	public addTransport: Transport ==> ()
		addTransport(T) == (
				transports := transports union {T};
			return;
		)
		pre T not in set transports
		post T in set transports;
		
	-- Add an equipment to the building
	public addEquipment: Equipment ==> ()
		addEquipment(E) == (
				equipments := equipments union {E};
			return;
		)
		pre E not in set equipments
		post E in set equipments;
		
	-- Change X Y Z and Description of point of interest 
	public changePoint: PointOfInterest*nat*nat*nat*PointOfInterest`Desc ==> ()
		changePoint(P,newx, newy, newz, newdesc) == (
			P.changePoint(newx, newy,newz,newdesc);
			return;
		)
		pre P in set points;
	
	-- Change X Y, Description, DownFloor, UpFloor and Type of stair
	public changeTransport: Transport*Transport`X * Transport`Y * Transport`Desc * Transport`DownFloor * Transport`UpFloor * Transport`Type ==> ()
		changeTransport(T,newx, newy, newdesc, newdown, newup, newtype) == (
			T.changeTransport(newx, newy, newdesc, newdown, newup, newtype);
			return;
		)
		pre T in set transports;
		
	-- Change X Y, Z and name of equipment
	public changeEquipment: Equipment * Equipment`X * Equipment`Y * Equipment`Z * Equipment`Name ==> ()
		changeEquipment(E, newx, newy, newz, newname) == (
			E.changeEquipment(newx, newy, newz, newname);
			return;
		)
		pre E in set equipments;
	
	-- Remove point of interest
	public removePoint: PointOfInterest ==>()
		removePoint(P) == (
			points := points \ {P};
			return;
		)
		pre P in set points
		post P not in set points;
	
	-- Remove transport
	public removeTransport: Transport ==>()
		removeTransport(T) == (
			transports := transports \ {T};
			return;
		)
		pre T in set transports
		post T not in set transports;
		
	-- Remove equipment
	public removeEquipment: Equipment ==>()
		removeEquipment(E) == (
			equipments := equipments \ {E};
			return;
		)
		pre E in set equipments
		post E not in set equipments;
		
		--Remove all points
		public removePoints:() ==> ()
			removePoints() == (
				points := points \ points;
			) 
		pre points <> {}
		post points = {};
		
		--Remove all transports
		public removeTransports:() ==> ()
			removeTransports() == (
				transports := transports \ transports;
			) 
		pre transports <> {}
		post transports = {};
		
		--Remove all equipments
		public removeEquipments:() ==> ()
			removeEquipments() == (
				equipments := equipments \ equipments;
			) 
		pre equipments <> {}
		post equipments = {};
		
		--GET SHORTEST PATH P1 TO P2		
		
		--GET SHORTEST ACCESSIBLE PATH 
		
		--GET CLOSER TYPE OF EQUIPMENT
	
end Building